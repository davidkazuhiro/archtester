#!/bin/bash

#
# Constants -------------------------------------------------------------
#

testerconfigserver=https://www.suckagetest.net/archtester
testergeneration=101
configfile=/etc/archtester/config.txt
if [ -s $configfile ]
then
    testerid=`grep TESTERID $configfile | cut -f2 -d=`
else
    testerid=dev0001
fi
version=0.5
ledredpin=17
ledgreenpin=27
ledyellowpin=22
logfile=/var/log/archtesterd.log
resultfile=/var/log/archtesterd.res.log
cmdlogfile=/var/log/archtesterd.cmd.log
cmderrlogfile=/var/log/archtesterd.cmderr.log
debugoutputfile=/tmp/archtesterd.debug
wgetopts="--dns-timeout=4 --connect-timeout=4 --read-timeout=10"

#
# Configuration options -------------------------------------------------
#

daemon=1
debug=1
deepdebug=0
sleeptime=2
blinkhalftime=0.3
useleds=1
allowinstall=1
originalarguments="$*"

#
# Initialize ------------------------------------------------------------
#

touch $debugoutputfile
touch $logfile
date >> $logfile
echo "Started" >> $logfile
sync

#
# Function definitions --------------------------------------------------
#

#
# Kill the archtester process
#

function archtester_kill {
  archtester_ledsmode off 0.0
  killall archtester > /dev/null 2> /dev/null
}

#
# Debug printouts
#

function archtester_debug {
    if [ $debug = 1 ]
    then
        if [ $daemon = 1 ]
	then
	    echo "archtester: debug: $*" >> $debugoutputfile
	else
	    echo "archtester: debug: $*"
	fi
    fi
}

function archtester_deepdebug {
    if [ $deepdebug = 1 ]
    then
        if [ $daemon = 1 ]
	then
	    echo "archtester: debug: $*" >> $debugoutputfile
	else
	    echo "archtester: debug: $*"
	fi
    fi
}

#
# Fetch config
#

function archtester_fetchconfig {
  archtester_debug fetching config...
  tmpfile=/tmp/archtester.config.txt
  mkdir -p /etc/archtester
  if wget -q $wgetopts -O $tmpfile $testerconfigserver/$testerid/config.txt
  then
    if [ -s $tmpfile ]
    then
	cp $tmpfile $configfile
	archtester_debug successfully retrieved config file
    else
	archtester_debug retrieved config file is zero length, bypassing...
    fi
  else
      archtester_debug cannot retrieve config file, bypassing...
  fi
}

#
# Read config
#

function archtester_readconfig {
    archtester_debug reading config file $configfile ...
    if [ -s $configfile ]
    then
      EXPECTEDGENERATION=`grep GENERATION= $configfile | cut -f2 -d=`
      EXPECTEDMODE=`grep MODE= $configfile | cut -f2 -d=`
    else
      EXPECTEDGENERATION=
      EXPECTEDMODE=
    fi
    archtester_debug "generation $EXPECTEDGENERATION mode $EXPECTEDMODE"
    # some sanity checks on data
    if [ "x$EXPECTEDGENERATION" = "x" ]
    then
	EXPECTEDGENERATION=$testergeneration
    fi
    if [ "x$EXPECTEDMODE" = "x" ]
    then
	EXPECTEDMODE=archtesterd_connectivity
    fi
    archtester_debug expected generation $EXPECTEDGENERATION expected mode $EXPECTEDMODE
}

#
# Update software if necessary
#

function archtester_softwareupdate {
    archtester_debug expected generation $EXPECTEDGENERATION current generation $testergeneration
    if [ $EXPECTEDGENERATION -gt $testergeneration ]
    then
	archtester_debug should update to $EXPECTEDGENERATION...
	tmpswfile=/tmp/archtester.software.tgz
	rm -f $tmpswfile 2> /dev/null > /dev/null
	if wget -q $wgetopts -O $tmpswfile $testerconfigserver/$testerid/software.tgz
	then
	    if [ -s $tmpswfile ]
	    then
		if tar tzf $tmpswfile > /dev/null
		then
		    archtester_debug we have new software, update to it
		    tmpswupdatescript=/tmp/archtester.software.update.sh
		    (echo "#!/bin/bash"
		     echo "mkdir -p /root/archtester /root/hopping /root/tlsver"
		     echo "cd /root/archtester"
		     echo "tar xzf $tmpswfile"
		     if [ $allowinstall = 1 ]
		     then
			 echo "make all install"
		     fi
		     echo "(cd ../hopping; git pull; make all install)"
		     echo "(cd ../tlsver; git pull; make all install)"
		     echo "exec ./archtesterd $originalarguments") > $tmpswupdatescript
		    chmod u+x $tmpswupdatescript
		    archtester_debug going to execute script $tmpswupdatescript
		    exec $tmpswupdatescript
		else
		    archtester_debug software file is not a readable tgz file
		fi
	    else
		archtester_debug software file is zero size
	    fi
	else
	    archtester_debug cannot wget software
	fi
    fi
}

#
# Initialize leds
#

function archtester_ledinit {
    if [ $useleds = 1 ]
    then
	gpio -g mode $ledredpin out
	gpio -g mode $ledgreenpin out
	gpio -g mode $ledyellowpin out
    fi
}

#
# Blink a led
#
# Input: pin number (gpw numbering)
#

function archtester_ledblink {
    if [ $useleds = 1 ]
    then
	pin=$1
	sleeptimearg=$2
	archtester_deepdebug Led $pin set to blink
	sleeptimeargm=`(echo scale=0; echo "$sleeptimearg * 100") | bc | cut -f1 -d.`
	archtester_deepdebug "Sleeptime $sleeptimearg, sleeptimem $sleeptimeargm"
	tused=0
	tusedm=0
	while [ $tusedm -lt $sleeptimeargm ]
	do
            gpio -g write $pin 1
    	    sleep $blinkhalftime
            gpio -g write $pin 0
    	    sleep $blinkhalftime
	    tused=`(echo scale=4; echo $tused + $blinkhalftime + $blinkhalftime) | bc`
 	    tusedm=`(echo scale=0; echo "$tused * 100") | bc | cut -f1 -d.`
 	    archtester_deepdebug "Tused $tused, tusedm $tusedm"
	done
    fi
}

#
# Set one led mode
#
# Input: pin number (gpw numbering), state (on, off, blink), sleeptime (seconds)
#

function archtester_ledset {
    if [ $useleds = 1 ]
    then
	pinni=$1
	state=$2
	sleeparg=$3
	case $state in
	    off)
		archtester_deepdebug Led $pinni set to off
		gpio -g write $pinni 0;;
	    on)
		archtester_deepdebug Led $pinni set to on
		gpio -g write $pinni 1;;
	    blink)
		archtester_ledblink $pinni $sleeparg &
		nop=nop;;
	    *) nop=nop;;
	esac
    fi
}

#
# Set the led bank mode
#
# Input: mode (off, flash, search, good, bad), sleeptime (seconds)
#

function archtester_ledsmode {

    if [ $useleds = 1 ]
    then

	modforleds=$1
	sleepytime=$2
	
	redstate=off
	greenstate=off
	yellowstate=off
	
	case $modforleds in
	    off)
		redstate=off
		greenstate=off
		yellowstate=off;;
	    flash)
		redstate=on
		greenstate=on
		yellowstate=on;;
	    search)
		redstate=off
		greenstate=off
		yellowstate=blink;;
	    good)
		redstate=off
		greenstate=on
		yellowstate=off;;
	    bad)
		redstate=on
		greenstate=off
		yellowstate=off;;
	    *)
		redstate=blinking
		greenstate=blinking
		yellowstate=blinking;;
	esac
	
	archtester_ledset $ledredpin $redstate $sleepytime
	archtester_ledset $ledgreenpin $greenstate $sleepytime
	archtester_ledset $ledyellowpin $yellowstate $sleepytime

    fi
}

#
# Analyzer main loop
#

function archtester_loop {

    #
    # Initialise tester
    #

    archtester_debug initialize
    archtester_ledinit
    archtester_ledsmode off 0.5
    sleep 0.5
    archtester_ledsmode flash 1.5
    sleep 1.5
    archtester_ledsmode off 0.5

    if [ $debug = 1 ]
    then
	opts="-debug";
    else
	opts="";
    fi
    
    #
    # Main loop
    #
    
    archtester_debug main loop
    while true
    do

	archtester_debug "looping with $EXPECTEDMODE..."
	$EXPECTEDMODE $opts -output $resultfile
	fullresult=`cat $resultfile`
	mode=`echo $fullresult | cut -f1 -d:`
	archtester_debug "full result $fullresult mode $mode"
	archtester_ledsmode $mode $sleeptime
	sleep $sleeptime
	
    done
}

#
# Main program -----------------------------------------------------
#

#
# Parse arguments
#

while [ $# -gt 0 ]
do
    case x$1 in
	x-kill)
	    shift
	    exec archtester_kill;;
	x-version)
	    shift
	    echo "archtester version " $version
	    exit 0;;
	x-foreground)
	    shift
	    daemon=0;;
	x-debug)
	    shift
	    debug=1;;
	x-quiet)
	    shift
	    debug=0;;
	x-no-leds)
	    shift
	    useleds=0;;
	x-leds)
	    shift
	    useleds=1;;
	x-disallow-install)
	    shift
	    allowinstall=0;;
	x-allow-install)
	    shift
	    allowinstall=1;;
	x-sleeptime)
	    shift
	    sleeptime=$1
	    shift
	    debug=0;;
	*)
	    echo "archtester: unexpected argument: $1"
	    exit 1;;
    esac
done

#
# Handle confifguration
#

archtester_fetchconfig
archtester_readconfig
archtester_softwareupdate

#
# Handle software updates
#

#
# Decide if to run as a daemon or not
#

if [ $daemon = 0 ]
then
    archtester_debug foreground
    archtester_loop
else
    archtester_debug daemon
    archtester_loop > $cmdlogfile 2> $cmderrlogfile &
    disown -r -h
    exit 0
fi
