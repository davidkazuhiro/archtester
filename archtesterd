#!/bin/bash

#
# Constants -------------------------------------------------------------
#

testerconfigserver=https://www.suckagetest.net/archtester
testergeneration=105
configfile=/etc/archtester/config.txt
if [ -s $configfile ]
then
    testerid=`grep TESTERID $configfile | cut -f2 -d=`
else
    testerid=dev0001
fi
version=0.5
logfile=/var/log/archtesterd.log
resultfile=/var/log/archtesterd.res.log
cmdlogfile=/var/log/archtesterd.cmd.log
cmderrlogfile=/var/log/archtesterd.cmderr.log
debugoutputfile=/tmp/archtesterd.debug
wgetopts="--prefer-family=IPv4 --dns-timeout=4 --connect-timeout=4 --read-timeout=10"

#
# Configuration options -------------------------------------------------
#

daemon=1
debug=1
deepdebug=0
useleds=1
allowinstall=1
originalarguments="$*"
sleeptime=2

#
# Initialize ------------------------------------------------------------
#

touch $debugoutputfile
touch $logfile
date >> $logfile
echo "Started" >> $logfile
sync

#
# Function definitions --------------------------------------------------
#

#
# Kill the archtester process
#

function archtesterd_kill {
  archtesterd_leds off
  killall archtester > /dev/null 2> /dev/null
}

#
# Debug printouts
#

function archtesterd_debug {
    if [ $debug = 1 ]
    then
        if [ $daemon = 1 ]
	then
	    echo "archtesterd: debug: $*" >> $debugoutputfile
	else
	    echo "archtesterd: debug: $*"
	fi
    fi
}

function archtesterd_deepdebug {
    if [ $deepdebug = 1 ]
    then
        if [ $daemon = 1 ]
	then
	    echo "archtesterd: debug: $*" >> $debugoutputfile
	else
	    echo "archtesterd: debug: $*"
	fi
    fi
}

#
# Fetch config
#

function archtesterd_fetchconfig {
  archtesterd_debug fetching config...
  ifconfig >> $debugoutputfile
  tmpfile=/tmp/archtester.config.txt
  mkdir -p /etc/archtester
  if wget -q $wgetopts -O $tmpfile $testerconfigserver/$testerid/config.txt
  then
    if [ -s $tmpfile ]
    then
	cp $tmpfile $configfile
	archtesterd_debug successfully retrieved config file
    else
	archtesterd_debug retrieved config file is zero length, bypassing...
    fi
  else
      archtesterd_debug cannot retrieve config file, bypassing...
  fi
}

#
# Read config
#

function archtesterd_readconfig {
    archtesterd_debug reading config file $configfile ...
    ifconfig >> $debugoutputfile
    if [ -s $configfile ]
    then
      EXPECTEDGENERATION=`grep GENERATION= $configfile | cut -f2 -d=`
      EXPECTEDMODE=`grep MODE= $configfile | cut -f2 -d=`
    else
      EXPECTEDGENERATION=
      EXPECTEDMODE=
    fi
    archtesterd_debug "generation $EXPECTEDGENERATION mode $EXPECTEDMODE"
    # some sanity checks on data
    if [ "x$EXPECTEDGENERATION" = "x" ]
    then
	EXPECTEDGENERATION=$testergeneration
    fi
    if [ "x$EXPECTEDMODE" = "x" ]
    then
	EXPECTEDMODE=archtesterd_connectivity
    fi
    archtesterd_debug expected generation $EXPECTEDGENERATION expected mode $EXPECTEDMODE
}

#
# Update software if necessary
#

function archtesterd_softwareupdate {
    archtesterd_debug expected generation $EXPECTEDGENERATION current generation $testergeneration
    ifconfig >> $debugoutputfile
    if [ $EXPECTEDGENERATION -gt $testergeneration ]
    then
	archtesterd_debug should update to $EXPECTEDGENERATION...
	tmpswfile=/tmp/archtester.software.tgz
	rm -f $tmpswfile 2> /dev/null > /dev/null
        ifconfig >> $debugoutputfile
	if wget -q $wgetopts -O $tmpswfile $testerconfigserver/$testerid/software.tgz
	then
	    if [ -s $tmpswfile ]
	    then
		if tar tzf $tmpswfile > /dev/null
		then
		    archtesterd_debug we have new software, update to it
		    tmpswupdatescript=/tmp/archtester.software.update.sh
		    (echo "#!/bin/bash"
		     echo "echo update 1 >> /tmp/archtesterd.update.log"
		     echo "mkdir -p /root/archtester /root/hopping /root/tlsver"
		     echo "echo update 2 >> /tmp/archtesterd.update.log"
		     echo "cd /root/archtester"
		     echo "echo update 3 >> /tmp/archtesterd.update.log"
		     echo "tar xzf $tmpswfile"
		     echo "echo update 4 >> /tmp/archtesterd.update.log"
		     if [ $allowinstall = 1 ]
		     then
			 echo "make all install"
		     fi
		     echo "echo update 5 >> /tmp/archtesterd.update.log"
		     echo "(cd ../hopping; git pull; make all install)"
		     echo "echo update 6 >> /tmp/archtesterd.update.log"
		     echo "(cd ../tlsver; git pull; make all install)"
		     echo "echo update 7 >> /tmp/archtesterd.update.log"
		     echo "exec ./archtesterd $originalarguments") > $tmpswupdatescript
		    chmod u+x $tmpswupdatescript
		    archtesterd_debug going to execute script $tmpswupdatescript
		    exec $tmpswupdatescript
		else
		    archtesterd_debug software file is not a readable tgz file
		fi
	    else
		archtesterd_debug software file is zero size
	    fi
	else
	    archtesterd_debug cannot wget software
	fi
    fi
}

#
# Analyzer main loop
#

function archtesterd_loop {

    sleep 6
    
    #
    # Initialise tester
    #

    archtesterd_debug initialize
    if [ $useleds = 1 ]
    then
	archtesterd_leds init
	archtesterd_leds off
	sleep 0.5
	archtesterd_leds flashall
    fi
    
    if [ $debug = 1 ]
    then
	opts="-debug";
    else
	opts="";
    fi
    
    #
    # Handle confifguration
    #

    sleep 10
    if [ $useleds = 1 ]
    then
	archtesterd_leds flashtwo
    fi
    archtesterd_fetchconfig
    archtesterd_readconfig
    
    #
    # Handle software updates
    #
    
    if [ $useleds = 1 ]
    then
	archtesterd_leds flashtwolast
    fi
    archtesterd_softwareupdate
    
    #
    # Main loop
    #
    
    if [ $useleds = 1 ]
    then
	archtesterd_leds search
    fi
    archtesterd_debug main loop
    while true
    do

	archtesterd_debug "looping with $EXPECTEDMODE..."
	$EXPECTEDMODE $opts -output $resultfile
	fullresult=`cat $resultfile`
	mode=`echo $fullresult | cut -f1 -d:`
	archtesterd_debug "full result $fullresult mode $mode"
        if [ $useleds = 1 ]
        then
	    archtesterd_leds $mode
	fi
	sleep $sleeptime
	
    done
}

#
# Main program -----------------------------------------------------
#

#
# Parse arguments
#

while [ $# -gt 0 ]
do
    case x$1 in
	x-kill)
	    shift
	    exec archtesterd_kill;;
	x-version)
	    shift
	    echo "archtester version " $version
	    exit 0;;
	x-foreground)
	    shift
	    daemon=0;;
	x-debug)
	    shift
	    debug=1;;
	x-quiet)
	    shift
	    debug=0;;
	x-no-leds)
	    shift
	    useleds=0;;
	x-leds)
	    shift
	    useleds=1;;
	x-disallow-install)
	    shift
	    allowinstall=0;;
	x-allow-install)
	    shift
	    allowinstall=1;;
	x-sleeptime)
	    shift
	    sleeptime=$1
	    shift
	    debug=0;;
	*)
	    echo "archtesterd: unexpected argument: $1"
	    exit 1;;
    esac
done

#
# Decide if to run as a daemon or not
#

if [ $daemon = 0 ]
then
    archtesterd_debug foreground
    archtesterd_loop
else
    archtesterd_debug daemon
    archtesterd_loop > $cmdlogfile 2> $cmderrlogfile &
    disown -r -h
    exit 0
fi
