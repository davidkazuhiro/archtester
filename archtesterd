#!/bin/bash

#
# Constants -------------------------------------------------------------
#

testerconfigserver=https://www.suckagetest.net/archtester
testerid=dev0001
testergeneration=100
configfile=/etc/archtester/config.txt
version=0.2
ledredpin=17
ledgreenpin=27
ledyellowpin=22
logfile=/var/log/archtesterd.log
resultfile=/var/log/archtesterd.res.log
cmdlogfile=/var/log/archtesterd.cmd.log
cmderrlogfile=/var/log/archtesterd.cmderr.log

#
# Initialize ------------------------------------------------------------
#

daemon=1
debug=1
sleeptime=2
blinkhalftime=0.3

touch $logfile
date >> $logfile
echo "Started" >> $logfile
sync

#
# Function definitions --------------------------------------------------
#

#
# Kill the archtester process
#

function archtester_kill {
  archtester_ledsmode off 0.0
  killall archtester > /dev/null 2> /dev/null
}

#
# Debug printouts
#

function archtester_debug {
    if [ $debug = 1 ]
    then
	echo "archtester: debug: $*"
    fi
}

#
# Fetch config
#

function archtester_fetchconfig {
  archtester_debug fetching config...
  tmpfile=/tmp/archtester.config.txt
  mkdir -p /etc/archtester
  if wget -q -O $tmpfile $testerconfigserver/$testerid/config.txt
  then
    if [ -s $tmpfile ]
    then
	cp $tmpfile $configfile
	archtester_debug successfully retrieved config file
    else
	archtester_debug retrieved config file is zero length, bypassing...
    fi
  else
      archotester_debug cannot retrieve config file, bypassing...
  fi
}

#
# Fetch config
#

function archtester_readconfig {
    if [ -s $configfile ]
    then
      EXPECTEDGENERATION=`grep GENERATION= $configfile | cut -f2 -d=`
      EXPECTEDMODE=`grep MODE= $configfile | cut -f2 -d=`
    else
      EXPECTEDGENERATION=
      EXPECTEDMODE=
    fi
    archtester_debug generation $EXPECTEDGENERATION mode $EXPECTEDMODE
    # some sanity checks on data
    if [ "x$EXPECTEDGENERATION" = "x" ]
    then
	EXPECTEDGENERATION=$testergeneration
    fi
    if [ "x$EXPECTEDMODE" = "x" ]
    then
	EXPECTEDMODE=archtesterd_connectivity
    fi
}

#
# Initialize leds
#

function archtester_ledinit {
  gpio -g mode $ledredpin out
  gpio -g mode $ledgreenpin out
  gpio -g mode $ledyellowpin out
}

#
# Blink a led
#
# Input: pin number (gpw numbering)
#

function archtester_ledblink {
    pin=$1
    sleeptimearg=$2
    archtester_debug Led $pin set to blink
    sleeptimeargm=`(echo scale=0; echo "$sleeptimearg * 100") | bc | cut -f1 -d.`
    archtester_debug "Sleeptime $sleeptimearg, sleeptimem $sleeptimeargm"
    tused=0
    tusedm=0
    while [ $tusedm -lt $sleeptimeargm ]
    do
        gpio -g write $pin 1
    	sleep $blinkhalftime
        gpio -g write $pin 0
    	sleep $blinkhalftime
	tused=`(echo scale=4; echo $tused + $blinkhalftime + $blinkhalftime) | bc`
 	tusedm=`(echo scale=0; echo "$tused * 100") | bc | cut -f1 -d.`
 	archtester_debug "Tused $tused, tusedm $tusedm"
    done
}

#
# Set one led mode
#
# Input: pin number (gpw numbering), state (on, off, blink), sleeptime (seconds)
#

function archtester_ledset {
    pinni=$1
    state=$2
    sleeparg=$3
    case $state in
	off)
	    archtester_debug Led $pinni set to off
	    gpio -g write $pinni 0;;
	on)
	    archtester_debug Led $pinni set to on
	    gpio -g write $pinni 1;;
	blink)
	    archtester_ledblink $pinni $sleeparg &
	    nop=nop;;
	*) nop=nop;;
    esac
}

#
# Set the led bank mode
#
# Input: mode (off, flash, search, good, bad), sleeptime (seconds)
#

function archtester_ledsmode {

    modforleds=$1
    sleepytime=$2
    
    redstate=off
    greenstate=off
    yellowstate=off
    
    case $modforleds in
	off)
	    redstate=off
	    greenstate=off
	    yellowstate=off;;
	flash)
	    redstate=on
	    greenstate=on
	    yellowstate=on;;
	search)
	    redstate=off
	    greenstate=off
	    yellowstate=blink;;
	good)
	    redstate=off
	    greenstate=on
	    yellowstate=off;;
	bad)
	    redstate=on
	    greenstate=off
	    yellowstate=off;;
	*)
	    redstate=blinking
	    greenstate=blinking
	    yellowstate=blinking;;
    esac
    
    archtester_ledset $ledredpin $redstate $sleepytime
    archtester_ledset $ledgreenpin $greenstate $sleepytime
    archtester_ledset $ledyellowpin $yellowstate $sleepytime
}

#
# Analyzer main loop
#

function archtester_loop {

    #
    # Initialise tester
    #

    archtester_debug initialize
    archtester_ledinit
    archtester_ledsmode off 0.5
    sleep 0.5
    archtester_ledsmode flash 1.5
    sleep 1.5
    archtester_ledsmode off 0.5

    if [ $debug = 1 ]
    then
	opts="-d";
    else
	opts="";
    fi
    
    #
    # Main loop
    #
    
    archtester_debug main loop
    while true
    do

	archtesterd_connectivity $opts -output $resultfile
	fullresult=`cat $resultfile`
	mode=`echo $fullresult | cut -f1 -d:`
	archtester_ledsmode $mode $sleeptime
	sleep $sleeptime
	
    done
}

#
# Main program -----------------------------------------------------
#

#
# Parse arguments
#

while [ $# -gt 0 ]
do
    case x$1 in
	x-kill)
	    shift
	    exec archtester_kill;;
	x-version)
	    shift
	    echo "archtester version " $version
	    exit 0;;
	x-foreground)
	    shift
	    daemon=0;;
	x-debug)
	    shift
	    debug=1;;
	x-quiet)
	    shift
	    debug=0;;
	x-sleeptime)
	    shift
	    sleeptime=$1
	    shift
	    debug=0;;
	*)
	    echo "archtester: unexpected argument: $1"
	    exit 1;;
    esac
done

#
# Decide if to run as a daemon or not
#

if [ $daemon = 0 ]
then
    archtester_debug foreground
    archtester_loop
else
    archtester_debug daemon
    archtester_loop > $cmdlogfile 2> $cmderrlogfile &
    disown -r -h
    exit 0
fi
